{"version":3,"sources":["/Users/ronrennick/Sites/solaris/woocommerce/packages/js/e2e-environment/src/setup/jest.setup.js"],"names":["get","clearLocalStorage","enablePageDialogAccept","isOfflineMode","setBrowserViewport","consoleShouldSuppress","addConsoleSuppression","setupJestRetries","pageEvents","OBSERVED_CONSOLE_MESSAGE_TYPES","warning","error","setupBrowser","width","height","capturePageEventsForTearDown","page","on","eventName","listener","push","removePageEvents","forEach","handler","removeListener","expect","extend","toBeInRange","received","floor","ceiling","pass","condition","message","observeConsoleLogging","type","hasOwnProperty","text","includes","logFunction","args","console","beforeAll","afterEach","afterAll"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { get } from 'lodash';\nimport {\n\tclearLocalStorage,\n\tenablePageDialogAccept,\n\tisOfflineMode,\n\tsetBrowserViewport,\n} from '@wordpress/e2e-test-utils';\nimport { consoleShouldSuppress, addConsoleSuppression } from '../../utils';\nimport { setupJestRetries } from '../../config/jest-object.config';\n\n/**\n * Array of page event tuples of [ eventName, handler ].\n *\n * @type {Array}\n */\nconst pageEvents = [];\n\n/**\n * Set of logged messages that will only be logged once.\n */\naddConsoleSuppression('Failed to load resource: net::ERR_PROXY_CONNECTION_FAILED');\naddConsoleSuppression('the server responded with a status of 404');\n\n/**\n * Set of console logging types observed to protect against unexpected yet\n * handled (i.e. not catastrophic) errors or warnings. Each key corresponds\n * to the Puppeteer ConsoleMessage type, its value the corresponding function\n * on the console global object.\n *\n * @type {Object<string,string>}\n */\nconst OBSERVED_CONSOLE_MESSAGE_TYPES = {\n\twarning: 'warn',\n\terror: 'error',\n};\n\nasync function setupBrowser() {\n\tawait clearLocalStorage();\n\tawait setBrowserViewport( {\n\t\twidth: 1280,\n\t\theight: 800,\n\t});\n}\n\n/**\n * Adds an event listener to the page to handle additions of page event\n * handlers, to assure that they are removed at test teardown.\n */\nfunction capturePageEventsForTearDown() {\n\tpage.on( 'newListener', ( eventName, listener ) => {\n\t\tpageEvents.push( [ eventName, listener ] );\n\t} );\n}\n\n/**\n * Removes all bound page event handlers.\n */\nfunction removePageEvents() {\n\tpageEvents.forEach( ( [ eventName, handler ] ) => {\n\t\tpage.removeListener( eventName, handler );\n\t} );\n}\n\n/**\n * Add an expect range matcher.\n * @see https://jestjs.io/docs/expect#expectextendmatchers\n */\nexpect.extend({\n\ttoBeInRange: function (received, floor, ceiling) {\n\t\tconst pass = received >= floor && received <= ceiling;\n\t\tconst condition = pass ? 'not to be' : 'to be';\n\n\t\treturn {\n\t\t\tmessage: () =>\n\t\t\t\t`expected ${received} ${condition} within range ${floor} - ${ceiling}`,\n\t\t\tpass,\n\t\t};\n\t},\n});\n\n/**\n * Adds a page event handler to emit uncaught exception to process if one of\n * the observed console logging types is encountered.\n */\nfunction observeConsoleLogging() {\n\tpage.on( 'console', ( message ) => {\n\t\tconst type = message.type();\n\t\tif ( ! OBSERVED_CONSOLE_MESSAGE_TYPES.hasOwnProperty( type ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet text = message.text();\n\n\t\t// An exception is made for _blanket_ deprecation warnings: Those\n\t\t// which log regardless of whether a deprecated feature is in use.\n\t\tif ( text.includes( 'This is a global warning' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// A chrome advisory warning about SameSite cookies is informational\n\t\t// about future changes, tracked separately for improvement in core.\n\t\t//\n\t\t// See: https://core.trac.wordpress.org/ticket/37000\n\t\t// See: https://www.chromestatus.com/feature/5088147346030592\n\t\t// See: https://www.chromestatus.com/feature/5633521622188032\n\t\tif (\n\t\t\ttext.includes( 'A cookie associated with a cross-site resource' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Viewing posts on the front end can result in this error, which\n\t\t// has nothing to do with Gutenberg.\n\t\tif ( text.includes( 'net::ERR_UNKNOWN_URL_SCHEME' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Network errors are ignored only if we are intentionally testing\n\t\t// offline mode.\n\t\tif (\n\t\t\ttext.includes( 'net::ERR_INTERNET_DISCONNECTED' ) &&\n\t\t\tisOfflineMode()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// As of WordPress 5.3.2 in Chrome 79, navigating to the block editor\n\t\t// (Posts > Add New) will display a console warning about\n\t\t// non - unique IDs.\n\t\t// See: https://core.trac.wordpress.org/ticket/23165\n\t\tif ( text.includes( 'elements with non-unique id #_wpnonce' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst logFunction = OBSERVED_CONSOLE_MESSAGE_TYPES[ type ];\n\n\t\t// Limit repeated warnings.\n\t\tif ( consoleShouldSuppress( text ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// As of Puppeteer 1.6.1, `message.text()` wrongly returns an object of\n\t\t// type JSHandle for error logging, instead of the expected string.\n\t\t//\n\t\t// See: https://github.com/GoogleChrome/puppeteer/issues/3397\n\t\t//\n\t\t// The recommendation there to asynchronously resolve the error value\n\t\t// upon a console event may be prone to a race condition with the test\n\t\t// completion, leaving a possibility of an error not being surfaced\n\t\t// correctly. Instead, the logic here synchronously inspects the\n\t\t// internal object shape of the JSHandle to find the error text. If it\n\t\t// cannot be found, the default text value is used instead.\n\t\ttext = get(\n\t\t\tmessage.args(),\n\t\t\t[ 0, '_remoteObject', 'description' ],\n\t\t\ttext\n\t\t);\n\n\t\t// Disable reason: We intentionally bubble up the console message\n\t\t// which, unless the test explicitly anticipates the logging via\n\t\t// @wordpress/jest-console matchers, will cause the intended test\n\t\t// failure.\n\n\t\t// eslint-disable-next-line no-console\n\t\tconsole[ logFunction ]( text );\n\t} );\n}\n\n// Before every test suite run, delete all content created by the test. This ensures\n// other posts/comments/etc. aren't dirtying tests and tests don't depend on\n// each other's side-effects.\nbeforeAll( async () => {\n\tcapturePageEventsForTearDown();\n\tenablePageDialogAccept();\n\tobserveConsoleLogging();\n\tsetupJestRetries();\n} );\n\nafterEach( async () => {\n\tawait setupBrowser();\n} );\n\nafterAll( () => {\n\tremovePageEvents();\n} );\n"]}