import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
 * Internal dependencies
 */
import { showBlockToolbar } from './show-block-toolbar';
/**
 * Clicks a block toolbar button.
 *
 * @param {string} label  The text string of the button label.
 * @param {string} [type] The type of button label: 'ariaLabel' or 'content'.
 */

export function clickBlockToolbarButton(_x) {
  return _clickBlockToolbarButton.apply(this, arguments);
}

function _clickBlockToolbarButton() {
  _clickBlockToolbarButton = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(label) {
    var type,
        BLOCK_TOOLBAR_SELECTOR,
        button,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            type = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'ariaLabel';
            _context.next = 3;
            return showBlockToolbar();

          case 3:
            BLOCK_TOOLBAR_SELECTOR = 'block-editor-block-toolbar';

            if (!(type === 'ariaLabel')) {
              _context.next = 8;
              break;
            }

            _context.next = 7;
            return page.waitForSelector(".".concat(BLOCK_TOOLBAR_SELECTOR, " button[aria-label=\"").concat(label, "\"]"));

          case 7:
            button = _context.sent;

          case 8:
            if (!(type === 'content')) {
              _context.next = 12;
              break;
            }

            _context.next = 11;
            return page.waitForXPath("//*[@class='".concat(BLOCK_TOOLBAR_SELECTOR, "']//button[contains(text(), '").concat(label, "')]"));

          case 11:
            button = _context.sent;

          case 12:
            _context.next = 14;
            return button.evaluate(function (element) {
              return element.scrollIntoView();
            });

          case 14:
            _context.next = 16;
            return button.click();

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _clickBlockToolbarButton.apply(this, arguments);
}
//# sourceMappingURL=click-block-toolbar-button.js.map