import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/** @typedef {import('puppeteer').ElementHandle} ElementHandle */

/**
 * Finds the button responsible for toggling the sidebar panel with the provided title.
 *
 * @param {string} panelTitle The name of sidebar panel.
 *
 * @return {Promise<ElementHandle|undefined>} Object that represents an in-page DOM element.
 */
export function findSidebarPanelWithTitle(_x) {
  return _findSidebarPanelWithTitle.apply(this, arguments);
}

function _findSidebarPanelWithTitle() {
  _findSidebarPanelWithTitle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(panelTitle) {
    var panelToggleSelector, panelSelector;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            panelToggleSelector = "//div[contains(@class, \"edit-post-sidebar\")]//button[contains(@class, \"components-panel__body-toggle\") and contains(text(),\"".concat(panelTitle, "\")]");
            panelSelector = "".concat(panelToggleSelector, "/ancestor::*[contains(concat(\" \", @class, \" \"), \" components-panel__body \")]");
            _context.next = 4;
            return page.waitForXPath(panelSelector);

          case 4:
            return _context.abrupt("return", _context.sent);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _findSidebarPanelWithTitle.apply(this, arguments);
}
//# sourceMappingURL=find-sidebar-panel-with-title.js.map