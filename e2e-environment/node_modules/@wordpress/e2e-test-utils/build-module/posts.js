import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
 * WordPress dependencies
 */
import { addQueryArgs } from '@wordpress/url';
/**
 * Internal dependencies
 */

import { switchUserToAdmin } from './switch-user-to-admin';
import { switchUserToTest } from './switch-user-to-test';
import { visitAdminPage } from './visit-admin-page';
/**
 * Navigates to the post listing screen and bulk-trashes any posts which exist.
 *
 * @param {string} postType - String slug for type of post to trash.
 * @param {string} postStatus - String status of posts to trash.
 *
 * @return {Promise} Promise resolving once posts have been trashed.
 */

export function trashAllPosts() {
  return _trashAllPosts.apply(this, arguments);
}

function _trashAllPosts() {
  _trashAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var postType,
        postStatus,
        query,
        bulkSelector,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            postType = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'post';
            postStatus = _args.length > 1 ? _args[1] : undefined;
            _context.next = 4;
            return switchUserToAdmin();

          case 4:
            // Visit `/wp-admin/edit.php` so we can see a list of posts and delete them.
            query = addQueryArgs('', {
              post_type: postType,
              post_status: postStatus
            }).slice(1);
            _context.next = 7;
            return visitAdminPage('edit.php', query);

          case 7:
            _context.next = 9;
            return page.$('#bulk-action-selector-top');

          case 9:
            bulkSelector = _context.sent;

            if (bulkSelector) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return");

          case 12:
            _context.next = 14;
            return page.waitForSelector('[id^=cb-select-all-]');

          case 14:
            _context.next = 16;
            return page.click('[id^=cb-select-all-]');

          case 16:
            _context.next = 18;
            return page.select('#bulk-action-selector-top', 'trash');

          case 18:
            _context.next = 20;
            return page.click('#doaction');

          case 20:
            _context.next = 22;
            return page.waitForXPath('//*[contains(@class, "updated notice")]/p[contains(text(), "moved to the Trash.")]');

          case 22:
            _context.next = 24;
            return switchUserToTest();

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _trashAllPosts.apply(this, arguments);
}
//# sourceMappingURL=posts.js.map