{"version":3,"sources":["@wordpress/e2e-test-utils/src/inserter.js"],"names":["pressKeyWithModifier","INSERTER_SEARCH_SELECTOR","openGlobalBlockInserter","isGlobalInserterOpen","page","$","tab","click","toggleGlobalBlockInserter","waitForSelector","closeGlobalBlockInserter","evaluate","document","querySelector","waitForInserterCloseAndContentFocus","waitForFunction","body","contains","activeElement","searchForBlock","searchTerm","focus","keyboard","type","searchForPattern","waitForXPath","searchForReusableBlock","insertBlock","insertButton","insertPattern","insertReusableBlock","insertBlockDirectoryBlock"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nimport { pressKeyWithModifier } from './press-key-with-modifier';\n\n// This selector is written to support the current and old inserter markup\n// because the performance tests need to be able to run across versions.\nconst INSERTER_SEARCH_SELECTOR =\n\t'.block-editor-inserter__search-input,input.block-editor-inserter__search';\n\n/**\n * Opens the global block inserter.\n */\nexport async function openGlobalBlockInserter() {\n\tif ( await isGlobalInserterOpen() ) {\n\t\t// If global inserter is already opened, reset to an initial state where\n\t\t// the default (first) tab is selected.\n\t\tconst tab = await page.$(\n\t\t\t'.block-editor-inserter__tabs .components-tab-panel__tabs-item:nth-of-type(1):not(.is-active)'\n\t\t);\n\n\t\tif ( tab ) {\n\t\t\tawait tab.click();\n\t\t}\n\t} else {\n\t\tawait toggleGlobalBlockInserter();\n\n\t\t// Waiting here is necessary because sometimes the inserter takes more time to\n\t\t// render than Puppeteer takes to complete the 'click' action\n\t\tawait page.waitForSelector( '.block-editor-inserter__menu' );\n\t}\n}\n\nexport async function closeGlobalBlockInserter() {\n\tif ( await isGlobalInserterOpen() ) {\n\t\tawait toggleGlobalBlockInserter();\n\t}\n}\n\nasync function isGlobalInserterOpen() {\n\treturn await page.evaluate( () => {\n\t\treturn !! document.querySelector(\n\t\t\t'.edit-post-header [aria-label=\"Add block\"].is-pressed, .edit-site-header [aria-label=\"Add block\"].is-pressed'\n\t\t);\n\t} );\n}\n/**\n * Toggles the global inserter.\n */\nexport async function toggleGlobalBlockInserter() {\n\tawait page.click(\n\t\t'.edit-post-header [aria-label=\"Add block\"], .edit-site-header [aria-label=\"Add block\"]'\n\t);\n}\n\n/**\n * Retrieves the document container by css class and checks to make sure the document's active element is within it\n */\nasync function waitForInserterCloseAndContentFocus() {\n\tawait page.waitForFunction( () =>\n\t\tdocument.body\n\t\t\t.querySelector(\n\t\t\t\t'.interface-interface-skeleton__content .block-editor-block-list__layout'\n\t\t\t)\n\t\t\t.contains( document.activeElement )\n\t);\n}\n\n/**\n * Search for block in the global inserter\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function searchForBlock( searchTerm ) {\n\tawait openGlobalBlockInserter();\n\tawait page.waitForSelector( INSERTER_SEARCH_SELECTOR );\n\tawait page.focus( INSERTER_SEARCH_SELECTOR );\n\tawait pressKeyWithModifier( 'primary', 'a' );\n\tawait page.keyboard.type( searchTerm );\n}\n\n/**\n * Search for pattern in the global inserter\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function searchForPattern( searchTerm ) {\n\tawait openGlobalBlockInserter();\n\t// Select the patterns tab\n\tconst tab = await page.waitForXPath(\n\t\t'//div[contains(@class, \"block-editor-inserter__tabs\")]//button[.=\"Patterns\"]'\n\t);\n\tawait tab.click();\n\tawait page.waitForSelector( INSERTER_SEARCH_SELECTOR );\n\tawait page.focus( INSERTER_SEARCH_SELECTOR );\n\tawait pressKeyWithModifier( 'primary', 'a' );\n\tawait page.keyboard.type( searchTerm );\n}\n\n/**\n * Search for reusable block in the global inserter.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function searchForReusableBlock( searchTerm ) {\n\tawait openGlobalBlockInserter();\n\n\t// The reusable blocks tab won't appear until the reusable blocks have been\n\t// fetched. They aren't fetched until an inserter is used or the post\n\t// already contains reusable blocks, so wait for the tab to appear.\n\tawait page.waitForXPath(\n\t\t'//div[contains(@class, \"block-editor-inserter__tabs\")]//button[text()=\"Reusable\"]'\n\t);\n\n\t// Select the reusable blocks tab.\n\tconst tab = await page.waitForXPath(\n\t\t'//div[contains(@class, \"block-editor-inserter__tabs\")]//button[text()=\"Reusable\"]'\n\t);\n\tawait tab.click();\n\tawait page.waitForSelector( INSERTER_SEARCH_SELECTOR );\n\tawait page.focus( INSERTER_SEARCH_SELECTOR );\n\tawait pressKeyWithModifier( 'primary', 'a' );\n\tawait page.keyboard.type( searchTerm );\n}\n\n/**\n * Opens the inserter, searches for the given term, then selects the first\n * result that appears. It then waits briefly for the block list to update.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function insertBlock( searchTerm ) {\n\tawait searchForBlock( searchTerm );\n\tconst insertButton = await page.waitForXPath(\n\t\t`//button//span[contains(text(), '${ searchTerm }')]`\n\t);\n\tawait insertButton.click();\n\t// We should wait until the inserter closes and the focus moves to the content.\n\tawait waitForInserterCloseAndContentFocus();\n}\n\n/**\n * Opens the inserter, searches for the given pattern, then selects the first\n * result that appears. It then waits briefly for the block list to update.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function insertPattern( searchTerm ) {\n\tawait searchForPattern( searchTerm );\n\tconst insertButton = await page.waitForXPath(\n\t\t`//div[@role = 'button']//div[contains(text(), '${ searchTerm }')]`\n\t);\n\tawait insertButton.click();\n\t// We should wait until the inserter closes and the focus moves to the content.\n\tawait waitForInserterCloseAndContentFocus();\n}\n\n/**\n * Opens the inserter, searches for the given reusable block, then selects the\n * first result that appears. It then waits briefly for the block list to\n * update.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function insertReusableBlock( searchTerm ) {\n\tawait searchForReusableBlock( searchTerm );\n\tconst insertButton = await page.waitForXPath(\n\t\t`//button//span[contains(text(), '${ searchTerm }')]`\n\t);\n\tawait insertButton.click();\n\t// We should wait until the inserter closes and the focus moves to the content.\n\tawait waitForInserterCloseAndContentFocus();\n\t// We should wait until the block is loaded\n\tawait page.waitForXPath(\n\t\t'//*[@class=\"block-library-block__reusable-block-container\"]'\n\t);\n}\n\n/**\n * Opens the inserter, searches for the given block, then selects the\n * first result that appears from the block directory. It then waits briefly for the block list to\n * update.\n *\n * @param {string} searchTerm The text to search the inserter for.\n */\nexport async function insertBlockDirectoryBlock( searchTerm ) {\n\tawait searchForBlock( searchTerm );\n\n\t// Grab the first block in the list\n\tconst insertButton = await page.waitForSelector(\n\t\t'.block-directory-downloadable-blocks-list li:first-child button'\n\t);\n\tawait insertButton.click();\n\t// We should wait until the inserter closes and the focus moves to the content.\n\tawait waitForInserterCloseAndContentFocus();\n}\n"]}