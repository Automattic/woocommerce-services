{"version":3,"sources":["@wordpress/e2e-test-utils/src/mocks/create-embedding-matcher.js"],"names":["join","parameterEquals","parameterName","value","request","URL","url","searchParams","get","isRESTRoute","path","pathname","endsWith","createEmbeddingMatcher"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,MAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAA0BC,aAA1B,EAAyCC,KAAzC,EAAiD;AAChD,SAAO,UAAEC,OAAF;AAAA,WACN,IAAIC,GAAJ,CAASD,OAAO,CAACE,GAAR,EAAT,EAAyBC,YAAzB,CAAsCC,GAAtC,CAA2CN,aAA3C,MAA+DC,KADzD;AAAA,GAAP;AAEA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,WAAT,CAAsBC,IAAtB,EAA6B;AAC5B,SAAO,UAAEN,OAAF;AAAA,WACNH,eAAe,CAAE,YAAF,EAAgBS,IAAhB,CAAf,CAAuCN,OAAvC,KACA,IAAIC,GAAJ,CAASD,OAAO,CAACE,GAAR,EAAT,EAAyBK,QAAzB,CAAkCC,QAAlC,CAA4CZ,IAAI,CAAE,UAAF,EAAcU,IAAd,CAAhD,CAFM;AAAA,GAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASG,sBAAT,CAAiCP,GAAjC,EAAuC;AAC7C,SAAO,UAAEF,OAAF;AAAA,WACNK,WAAW,CAAE,mBAAF,CAAX,CAAoCL,OAApC,KACAH,eAAe,CAAE,KAAF,EAASK,GAAT,CAAf,CAA+BF,OAA/B,CAFM;AAAA,GAAP;AAGA","sourcesContent":["/**\n * External dependencies\n */\nimport { join } from 'path';\n\n/**\n * Creates a function to determine if a request has a parameter with a certain value.\n *\n * @param {string} parameterName The query parameter to check.\n * @param {string} value The value to check for.\n * @return {Function} Function that determines if a request's query parameter is the specified value.\n */\nfunction parameterEquals( parameterName, value ) {\n\treturn ( request ) =>\n\t\tnew URL( request.url() ).searchParams.get( parameterName ) === value;\n}\n\n/**\n * Creates a function to determine if a request is a REST request of a given\n * path, accounting for variance in site permalink configuration.\n *\n * @param {string} path REST path to test.\n *\n * @return {Function} Function that determines if a request is a REST request of\n *                    a given path, accounting for variance in site permalink\n *                    configuration.\n */\nfunction isRESTRoute( path ) {\n\treturn ( request ) =>\n\t\tparameterEquals( 'rest_route', path )( request ) ||\n\t\tnew URL( request.url() ).pathname.endsWith( join( '/wp-json', path ) );\n}\n\n/**\n * Creates a function to determine if a request is embedding a certain URL.\n *\n * @param {string} url The URL to check against a request.\n * @return {Function} Function that determines if a request is for the embed API, embedding a specific URL.\n */\nexport function createEmbeddingMatcher( url ) {\n\treturn ( request ) =>\n\t\tisRESTRoute( '/oembed/1.0/proxy' )( request ) &&\n\t\tparameterEquals( 'url', url )( request );\n}\n"]}